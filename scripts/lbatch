#!/usr/bin/env python
import Pyro4
import sys
import os

__author__ = 'dankle'

usage = """Usage:
    lbatch.py [-n N] [-o STDOUT] [-u URIFILE] sh myscript.sh
    lbatch.py [-n N] [-o STDOUT] [-u URIFILE] ls
    lbatch.py [-n N] [-o STDOUT] [-u URIFILE] python mypythonscript.py

Options:
  -n N        number of cores to use.
  -o STDOUT   file for stdout
  -u URIFILE  file where the uri for the localqd is written
"""


def parse_cli():
    args = sys.argv
    args.pop(0)  # remove script name itself

    if len(args) == 0:
        print(usage)
        sys.exit(1)

    cliargs = {'-n': 1,
               '-u': "~/tmp/localqd",
               '-o': None,
               '-h': None,
               '-J': None}

    while str(args[0]) in cliargs.keys():
        if args[0] == '-h':
            print(usage)
            sys.exit(1)
        cliargs[args[0]] = args[1]
        args.pop(0)
        args.pop(0)

    if len(args) == 0:
        print(usage)
        sys.exit(1)

    return (cliargs, args)


def main():
    (cliargs, cmd) = parse_cli()

    requested_cores = int(cliargs["-n"])

    uri = ""
    urifile = os.path.expanduser(cliargs["-u"])
    if os.path.exists(urifile):
        pf = file(urifile, 'r')
        uri = str(pf.read().strip())
        pf.close()
    else:
        print("Could not find file " + str(urifile) + ". Is the localq daemon running?")
        sys.exit(1)

    localqd = Pyro4.Proxy(uri)
    num_server_cores = int(localqd.get_server_cores())

    if requested_cores <= num_server_cores:
        jobid = localqd.add(num_cores=requested_cores, cmd=cmd, rundir=os.getcwd(),
                            stderr=cliargs["-o"], stdout=cliargs["-o"], name=cliargs['-J'])
        print("Job added to the queue with id " + str(jobid))
        return 0
    else:
        print("ERROR: Tried to submit job with more requested cores than available on the server. Job would never run.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
